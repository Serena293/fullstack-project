//package com.capstone.plan_app.contacts;
//
//import com.capstone.plan_app.user.AppUsers;
//import jakarta.validation.Valid;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.dao.DataIntegrityViolationException;
//import org.springframework.http.ResponseEntity;
//import org.springframework.transaction.annotation.Transactional;
//import org.springframework.web.bind.annotation.*;
//
//import java.util.List;
//
//@RestController
//@RequestMapping("/api/users/{userId}/contacts")
//public class ContactController {
//
//    private static final Logger logger = LoggerFactory.getLogger(ContactController.class);
//    private final ContactService contactService;
//
//    @Autowired
//    public ContactController(ContactService contactService) {
//        this.contactService = contactService;
//    }
//    @PostMapping
//    public ResponseEntity<String> addContact(
//            @PathVariable Long userId,
//            @Valid @RequestBody AddContactRequest request) {
//
//        contactService.addContactByUsername(userId, request.getUsername());
//        return ResponseEntity.ok("Operazione completata");
//    }
//
//    @GetMapping
//    public ResponseEntity<?> getContacts(@PathVariable Long userId) {
//        logger.info("Richiesta contatti per userId: {}", userId);
//
//        try {
//            List<AppUsers> contacts = contactService.getContacts(userId);
//            logger.info("Trovati {} contatti", contacts.size());
//            return ResponseEntity.ok(contacts);
//
//        } catch (Exception e) {
//            logger.error("Errore recupero contatti: ", e);
//            return ResponseEntity.badRequest().body(e.getMessage());
//        }
//    }
//
//    @DeleteMapping("/{username}")
//    @Transactional
//    public ResponseEntity<String> removeContact(
//            @PathVariable Long userId,
//            @PathVariable String username) {
//
//        logger.info("Richiesta rimozione contatto - UserID: {} | Username: {}", userId, username);
//
//        try {
//            contactService.removeContactByUsername(userId, username);
//            logger.info("Contatto rimosso con successo");
//            return ResponseEntity.ok("Contatto rimosso con successo");
//
//        } catch (Exception e) {
//            logger.error("Errore rimozione contatto: ", e);
//            return ResponseEntity.badRequest().body(e.getMessage());
//        }
//    }
//}


package com.capstone.plan_app.contacts;

import com.capstone.plan_app.user.AppUsers;
import com.capstone.plan_app.user.UserDTO;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/users/{userId}/contacts")
public class ContactController {

    private static final Logger logger = LoggerFactory.getLogger(ContactController.class);
    private final ContactService contactService;

    public ContactController(ContactService contactService) {
        this.contactService = contactService;
    }

    @PostMapping
    public ResponseEntity<String> addContact(
            @PathVariable Long userId,
            @Valid @RequestBody AddContactRequest request) {

        try {
            logger.debug("Aggiunta contatto - UserID: {} | Username: {}", userId, request.getUsername());
            contactService.addContactByUsername(userId, request.getUsername());
            return ResponseEntity.ok("Contatto aggiunto con successo");
        } catch (DataIntegrityViolationException e) {
            logger.warn("Violazione integrità dati: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Il contatto esiste già");
        } catch (IllegalArgumentException e) {
            logger.warn("Richiesta non valida: {}", e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            logger.error("Errore interno durante l'aggiunta del contatto", e);
            return ResponseEntity.internalServerError().body("Errore del server");
        }
    }

    @GetMapping
    public ResponseEntity<?> getContacts(@PathVariable Long userId) {
        logger.info("Richiesta contatti per userId: {}", userId);

        try {
            List<AppUsers> contacts = contactService.getContacts(userId);
            logger.debug("Trovati {} contatti per userId: {}", contacts.size(), userId);

            List<UserDTO> contactDTOs = contacts.stream()
                    .map(this::convertToDTO)
                    .collect(Collectors.toList());

            return ResponseEntity.ok(contactDTOs);
        } catch (IllegalArgumentException e) {
            logger.warn("Richiesta non valida: {}", e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            logger.error("Errore recupero contatti", e);
            return ResponseEntity.internalServerError().body("Errore del server");
        }
    }

    @DeleteMapping("/{username}")
    @Transactional
    public ResponseEntity<String> removeContact(
            @PathVariable Long userId,
            @PathVariable String username) {

        logger.info("Rimozione contatto - UserID: {} | Username: {}", userId, username);

        try {
            contactService.removeContactByUsername(userId, username);
            return ResponseEntity.ok("Contatto rimosso con successo");
        } catch (IllegalArgumentException e) {
            logger.warn("Richiesta non valida: {}", e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            logger.error("Errore rimozione contatto", e);
            return ResponseEntity.internalServerError().body("Errore del server");
        }
    }

    private UserDTO convertToDTO(AppUsers user) {
        return new UserDTO(
                user.getUserId(),
                user.getUsername(),
                user.getFirstName(),
                user.getLastName(),
                user.getEmail()
        );
    }
}